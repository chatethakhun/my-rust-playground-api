// // src/api/kit.rs (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)

// use axum::{
//     extract::{Query, State},
//     http::StatusCode,
//     Json,
// };
// use chrono::Utc;
// use mongodb::{bson::doc, Collection, Database};
// use serde::Deserialize;

// use crate::model::kit::Kit; // Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Kit
// use crate::state::AppState;
// use crate::{middleware::auth::AuthUser, model::kit::KitGrade}; // Extractor ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö req.user.id

// use futures_util::TryStreamExt;

// // 1. Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Query Parameters (req.query)
// #[derive(Debug, Deserialize)]
// pub struct KitQuery {
//     // Rust ‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å URL (?isFinished=true/false) ‡πÄ‡∏õ‡πá‡∏ô Boolean ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
//     pub is_finished: Option<bool>,
// }

// #[derive(Debug, Deserialize)]
// pub struct CreateKitPayload {
//     pub name: String,
//     pub grade: KitGrade, // ‡πÉ‡∏ä‡πâ String ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ KitGrade Enum ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
//     pub manufacturer: Option<String>,
//     pub is_finished: Option<bool>,
//     // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ user field ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏î‡∏¢ Handler
// }

// // 2. Handler Function
// // ‡∏£‡∏±‡∏ö State, AuthUser (‡πÅ‡∏ó‡∏ô req.user.id), ‡πÅ‡∏•‡∏∞ Query Params

// pub async fn get_kits_handler(
//     State(state): State<AppState>,

//     // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
//     auth_user: AuthUser, // ‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ AuthUser

//     Query(params): Query<KitQuery>,
// ) -> Result<Json<Vec<Kit>>, StatusCode> {
//     // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Database
//     let db: Database = state.mongo_client.database(&state.db_name);
//     let collection = db.collection::<Kit>("kits");

//     // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Filter (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ Kit.find({ isFinished: ... }))
//     let mut filter = doc! {};

//     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isFinished (req.query.isFinished)
//     if let Some(is_finished) = params.is_finished {
//         filter.insert("isFinished", is_finished);
//     }

//     // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç .forUser(req.user.id)
//     // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÉ‡∏ô MongoDB ‡∏°‡∏µ field ‡∏ä‡∏∑‡πà‡∏≠ userId ‡πÄ‡∏Å‡πá‡∏ö Owner ID ‡πÑ‡∏ß‡πâ
//     filter.insert("user", auth_user.username); // ‡πÉ‡∏ä‡πâ username ‡πÄ‡∏õ‡πá‡∏ô ID

//     // 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Sort (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ .sort({ updatedAt: -1 }))
//     let options = mongodb::options::FindOptions::builder()
//         .sort(doc! { "updatedAt": -1 }) // -1 ‡∏Ñ‡∏∑‡∏≠ Descending
//         .build();

//     // 4. ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
//     let cursor = collection
//         .find(filter, options)
//         .await
//         .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;

//     // 5. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ .lean() ‡πÅ‡∏•‡∏∞ res.json(kits))
//     let kits: Vec<Kit> = cursor
//         .try_collect()
//         .await
//         .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;

//     // 6. ‡∏™‡πà‡∏á Response
//     // ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ .populate() ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡πÅ‡∏¢‡∏Å‡πÉ‡∏ô Rust ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ ORM
//     // ‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô Repository/Service Layer ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
//     Ok(Json(kits))
// }

// // üöÄ Handler Function: POST /kits
// pub async fn create_kit_handler(
//     State(state): State<AppState>,
//     auth_user: AuthUser,
//     Json(params): Json<CreateKitPayload>,
// ) -> Result<Json<Kit>, StatusCode> {
//     // ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Database ‡πÅ‡∏•‡∏∞ Collection
//     let db: Database = state.mongo_client.database(&state.db_pool);
//     let collection: Collection<Kit> = db.collection("kits");

//     // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Kit Struct ‡∏à‡∏≤‡∏Å Payload ‡πÅ‡∏•‡∏∞ AuthUser
//     //
//     // // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Kit Struct ‡∏à‡∏≤‡∏Å Payload ‡πÅ‡∏•‡∏∞ AuthUser

//     // üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ from_chrono() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
//     let new_kit = Kit {
//         id: None, // ‡πÉ‡∏´‡πâ MongoDB ‡∏™‡∏£‡πâ‡∏≤‡∏á
//         name: params.name,
//         grade: params.grade,
//         manufacturer: params.manufacturer,
//         is_finished: params.is_finished.unwrap_or(false),
//         // üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ username ‡∏à‡∏≤‡∏Å AuthUser (‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å JWT sub)]
//         updated_at: Utc::now(),
//         created_at: Utc::now(),
//         user: auth_user.username,
//         // runners: None,
//     };

//     // 2. ‡∏™‡πà‡∏á Kit ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á MongoDB ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error
//     let inserted_result = collection.insert_one(new_kit.clone(), None).await;

//     println!("New document inserted with ID: {:?}", inserted_result);

//     // handle error if insert_one() failed if duplicate

//     if inserted_result.is_err() {
//         return Err(StatusCode::INTERNAL_SERVER_ERROR);
//     }

//     Ok(Json(new_kit))

//     // 3. ‡∏™‡πà‡∏á Kit ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error
// }
