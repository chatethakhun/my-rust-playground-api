use crate::model::color::{Color, UpdateColorPayload};
use chrono::Utc;
use sqlx::{Error, SqlitePool};

pub async fn get_colors(pool: &SqlitePool, user_id: i64) -> Result<Vec<Color>, Error> {
    let colors_by_username =
        sqlx::query_as!(Color, "SELECT * FROM colors WHERE user_id = ?", user_id)
            .fetch_all(pool)
            .await?;

    let mut colors = vec![];
    for color in colors_by_username {
        colors.push(color);
    }

    Ok(colors)
}

pub async fn get_color_by_id(pool: &SqlitePool, color_id: i64) -> Result<Color, Error> {
    let color = sqlx::query_as!(
        Color,
        "SELECT id, name, code, hex, is_clear, is_multi, user_id, created_at, updated_at FROM colors WHERE id = ?",
        color_id
    )
    .fetch_one(pool)
    .await?;

    Ok(color)
}

pub async fn create_color(pool: &SqlitePool, color: Color) -> Result<Color, Error> {
    // 1. üöÄ INSERT: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á ID
    // üí° Note: ‡πÄ‡∏£‡∏≤‡πÉ‡∏™‡πà user_id ‡πÉ‡∏ô color struct ‡πÅ‡∏ï‡πà SQLx ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏±‡∏ô‡πÉ‡∏ô query
    let result = sqlx::query!(
        "INSERT INTO colors (name, code, hex, is_clear, is_multi, user_id)
         VALUES (?, ?, ?, ?, ?, ?)",
        color.name,
        color.code,
        color.hex,
        color.is_clear,
        color.is_multi,
        color.user_id
    )
    .execute(pool)
    .await?;

    // 2. ‡∏î‡∏∂‡∏á Last Insert ID
    let last_insert_id = result.last_insert_rowid();

    // 3. üöÄ SELECT: ‡∏î‡∏∂‡∏á Object ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ (‡∏£‡∏ß‡∏° Timestamps)
    // ‡πÉ‡∏ä‡πâ last_insert_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
    let created_color = sqlx::query_as!(
        Color,
        "SELECT id, name, code, hex, is_clear, is_multi, user_id, created_at, updated_at
         FROM colors WHERE id = ?",
        last_insert_id
    )
    .fetch_one(pool) // ‡∏ï‡πâ‡∏≠‡∏á fetch_one ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    .await?;

    // 4. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Color ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    Ok(created_color) // ‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
}

// üöÄ Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Color

// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Ñ‡∏ß‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î struct ‡∏Ç‡∏≠‡∏á payload ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å JSON body

pub async fn update_color(
    pool: &SqlitePool,
    color_id: i64,
    user_id: i64,
    payload: UpdateColorPayload,
) -> Result<Color, Error> {
    // üëà 1. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Return Type ‡πÄ‡∏õ‡πá‡∏ô Result<Color, Error>

    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: UPDATE ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    let now = Utc::now().naive_utc();
    let result = sqlx::query!(
        r#"
        UPDATE colors
        SET
            name = COALESCE(?, name),
            code = COALESCE(?, code),
            hex = COALESCE(?, hex),
            is_clear = COALESCE(?, is_clear),
            is_multi = COALESCE(?, is_multi),
            updated_at = ?
        WHERE id = ? AND user_id = ?
        "#,
        payload.name,
        payload.code,
        payload.hex,
        payload.is_clear,
        payload.is_multi,
        now,
        color_id,
        user_id
    )
    .execute(pool)
    .await?;

    // üëà 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if result.rows_affected() == 0 {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏¢ (‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏£‡∏≤‡∏∞ id ‡∏´‡∏£‡∏∑‡∏≠ user_id ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á)
        // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Error::RowNotFound ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ handler ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 404 Not Found
        return Err(Error::RowNotFound);
    }

    // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: SELECT ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ---
    // ‡πÉ‡∏ä‡πâ sqlx::query_as! ‡πÄ‡∏û‡∏∑‡πà‡∏≠ map ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Ç‡πâ‡∏≤ struct `Color` ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    let updated_color = sqlx::query_as!(
        Color,
        "SELECT id, name, code, hex, is_clear, is_multi, user_id, created_at, updated_at FROM colors WHERE id = ?",
        color_id
    )
    .fetch_one(pool) // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÅ‡∏Ñ‡πà 1 ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    .await?;

    // üëà 3. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ struct Color ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    Ok(updated_color)
}

pub async fn delete_color(pool: &SqlitePool, color_id: i64, user_id: i64) -> Result<(), Error> {
    // üëà ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Result<(), Error> ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏î‡πÜ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤

    let result = sqlx::query!(
        "DELETE FROM colors WHERE id = ? AND user_id = ?",
        color_id,
        user_id // üõ°Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô WHERE clause
    )
    .execute(pool)
    .await?;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if result.rows_affected() == 0 {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏•‡∏¢ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏£‡∏≤‡∏∞ id ‡∏´‡∏£‡∏∑‡∏≠ user_id ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á)
        // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Error::RowNotFound ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ handler ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
        return Err(Error::RowNotFound);
    }

    // ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Ok ‡∏ó‡∏µ‡πà‡∏°‡∏µ unit type `()` ‡∏ã‡∏∂‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö"
    Ok(())
}
