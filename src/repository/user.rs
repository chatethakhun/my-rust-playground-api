use crate::model::user::User;
use sqlx::{sqlite::SqliteQueryResult, Error, SqlitePool}; // üö® ‡πÉ‡∏ä‡πâ Error ‡∏à‡∏≤‡∏Å sqlx

// üö® ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Return Type: ‡πÉ‡∏ä‡πâ sqlx::Error ‡πÅ‡∏ó‡∏ô mongodb::error::Error
pub async fn find_by_username(pool: &SqlitePool, username: &str) -> Result<Option<User>, Error> {
    // ‚úÖ ‡πÉ‡∏ä‡πâ sqlx::Error

    // 1. üö® ‡πÉ‡∏ä‡πâ SQL Query ‡πÅ‡∏•‡∏∞ FromRow Macro
    let user = sqlx::query_as!(User, "SELECT * FROM users WHERE username = ?", username)
        .fetch_optional(pool) // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å Pool
        .await?; // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏Ç‡∏≠‡∏á SQLx

    // 2.return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠ None
    Ok(user)
}

pub async fn create_user(pool: &SqlitePool, new_user: User) -> Result<SqliteQueryResult, Error> {
    // ‚úÖ ‡πÉ‡∏ä‡πâ sqlx::Error
    // 1. üö® ‡πÉ‡∏ä‡πâ SQL Query ‡πÅ‡∏•‡∏∞ FromRow Macro
    let result = sqlx::query!(
        "INSERT INTO users (username, password_hash, role, avatar_url, bio, full_name)
             VALUES (?, ?, ?, ?, ?, ?)",
        new_user.username,
        new_user.password_hash,
        new_user.role,
        new_user.avatar_url,
        new_user.bio,
        new_user.full_name,
    )
    .execute(pool) // üö® ‡πÉ‡∏ä‡πâ execute() ‡πÅ‡∏ó‡∏ô fetch_optional()
    .await?;

    // 2. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Result
    Ok(result) // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ SqliteQueryResult
}

// 2. üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (New Function)
// pub async fn create_user(
//     db: &SqlitePool,
//     new_user: User,
// ) -> Result<mongodb::results::InsertOneResult, mongodb::error::Error> {
//     // let collection: Collection<User> = db.collection("users");

//     // // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User (Struct) ‡∏•‡∏á‡πÉ‡∏ô MongoDB
//     // // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å User struct ‡∏°‡∏µ #[serde(skip_serializing_if = "Option::is_none")]
//     // // ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏™‡πà‡∏á None ‡πÉ‡∏ô id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ MongoDB ‡∏™‡∏£‡πâ‡∏≤‡∏á ObjectId ‡πÉ‡∏´‡πâ
//     // collection.insert_one(new_user, None).await
// }
