// src/repository/user.rs

use crate::model::user::User;
use mongodb::{bson::doc, Collection, Database};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
pub async fn find_by_username(
    db: &Database,
    username: &str,
) -> Result<Option<User>, mongodb::error::Error> {
    let collection: Collection<User> = db.collection("users");

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö username
    collection
        .find_one(doc! { "username": username }, None)
        .await
}

// 2. üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (New Function)
pub async fn create_user(
    db: &Database,
    new_user: User,
) -> Result<mongodb::results::InsertOneResult, mongodb::error::Error> {
    let collection: Collection<User> = db.collection("users");

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User (Struct) ‡∏•‡∏á‡πÉ‡∏ô MongoDB
    // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å User struct ‡∏°‡∏µ #[serde(skip_serializing_if = "Option::is_none")]
    // ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏™‡πà‡∏á None ‡πÉ‡∏ô id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ MongoDB ‡∏™‡∏£‡πâ‡∏≤‡∏á ObjectId ‡πÉ‡∏´‡πâ
    collection.insert_one(new_user, None).await
}
