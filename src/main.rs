use axum::{extract::State, routing::get, Json, Router};
use dotenvy;
use mongodb::Client; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á MongoDB Client
use serde::Serialize; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env

// Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Response ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
#[derive(Debug, Serialize, Clone)]
struct Message {
    message: String,
}

// Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Application State ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö MongoDB Client
#[derive(Clone)]
struct AppState {
    mongo_client: Client, // MongoDB Client
}

// ----------------------------------------------------
// HANDLERS
// ----------------------------------------------------

// Handler 1: Hello World
async fn root() -> Json<Message> {
    let response = Message {
        message: "Hello, World!".to_string(),
    };
    Json(response)
}

// Handler 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
async fn mongo_health_check(
    State(state): State<AppState>, // ‡∏î‡∏∂‡∏á AppState ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
) -> Json<Message> {
    // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Admin Database ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    match state.mongo_client.list_database_names(None, None).await {
        Ok(_) => Json(Message {
            message: "MongoDB Atlas Connection: OK".to_string(),
        }),
        Err(e) => {
            eprintln!("MongoDB Health Check Failed: {}", e);
            // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ error
            Json(Message {
                message: format!("MongoDB Atlas Connection FAILED: {}", e),
            })
        }
    }
}

// ----------------------------------------------------
// MAIN FUNCTION
// ----------------------------------------------------

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // 0. ‡πÇ‡∏´‡∏•‡∏î Environment Variables
    dotenvy::dotenv().ok();

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á MongoDB Client
    let database_url = std::env::var("DATABASE_URL")
        .expect("DATABASE_URL must be set in .env file (mongodb+srv://...)");

    // üöÄ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß: ‡πÉ‡∏ä‡πâ with_uri_str ‡πÅ‡∏•‡∏∞ await ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    let client = Client::with_uri_str(&database_url).await?;

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Application State
    let app_state = AppState {
        mongo_client: client,
    };

    // 3. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Router ‡πÅ‡∏•‡∏∞‡∏ù‡∏±‡∏á State
    let app = Router::new()
        .route("/", get(root))
        .route("/health/mongo", get(mongo_health_check))
        .with_state(app_state); // ‡∏™‡πà‡∏á AppState ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ

    let listener = tokio::net::TcpListener::bind("127.0.0.1:3000").await?;

    println!("üöÄ Server running on http://127.0.0.1:3000");
    println!("   - Base: http://127.0.0.1:3000/");
    println!("   - Health Check: http://127.0.0.1:3000/health/mongo");

    axum::serve(listener, app).await?;

    Ok(())
}
