// src/main.rs

// ‡∏ö‡∏≠‡∏Å Rust ‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏¢‡∏Å‡πÑ‡∏ß‡πâ
mod api;
mod middleware;
mod model;
mod repository;
mod state;

use axum::extract::State;
use axum::Json;
use axum::{routing::get, Router};
use dotenvy;
use mongodb::Client;
use tokio::net::TcpListener; // üëà ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ TcpListener ‡∏î‡πâ‡∏ß‡∏¢

use crate::api::i18n::serve_i18n_file;
use crate::model::user::Message;
use crate::state::AppState; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Health Check
                            // Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Health Check (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ api/health.rs ‡πÑ‡∏î‡πâ)
async fn mongo_health_check(State(_state): State<AppState>) -> Json<Message> {
    // ... ‡πÇ‡∏Ñ‡πâ‡∏î Health Check
    Json(Message {
        message: "Health Check OK".to_string(),
    })
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    dotenvy::dotenv().ok();

    // 1. Setup State (Client DB Name)
    let database_url =
        std::env::var("DATABASE_URL").expect("DATABASE_URL must be set in .env file");
    let db_name = std::env::var("MONGO_DATABASE_NAME").unwrap_or_else(|_| "auth_db".to_string());
    // üöÄ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ PORT

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á MongoDB Client (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ .await?)
    let client = Client::with_uri_str(&database_url).await?;
    let jwt_secret = std::env::var("JWT_SECRET").expect("JWT_SECRET must be set in .env file");
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á AppState struct (‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
    let app_state = AppState {
        mongo_client: client,
        db_name,
        jwt_secret,
    };

    // 1. Setup State (Client, DB_Name)
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡πÅ‡∏•‡∏∞ AppState)

    // 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Router
    let app: Router = Router::new()
        .route("/", get(|| async { "Axum API Running" }))
        // üöÄ ‡∏£‡∏ß‡∏° Routes ‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô
        .route("/health/mongo", get(mongo_health_check))
        .route("/i18n/:lng/:ns", get(serve_i18n_file))
        .nest(
            "/v2/api",
            Router::new()
                .nest("/auth", api::auth::auth_router()) // URL: /v2/api/auth/...
                .nest("/kits", api::kit::kit_router()), // URL: /v2/api/kits/...
        )
        .with_state(app_state.clone());

    // 3. ‡∏£‡∏±‡∏ô Server
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô server)
    //
    let port: u16 = std::env::var("PORT")
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å String ‡πÄ‡∏õ‡πá‡∏ô u16
        .unwrap_or_else(|_| "3000".to_string()) // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö PORT ‡πÉ‡∏ô env ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ "3000" ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        .parse()
        .expect("PORT must be a valid number (u16)"); // ‡∏´‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡πÉ‡∏´‡πâ panic

    // üí° Bind Address: ‡πÉ‡∏ä‡πâ "0.0.0.0" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏ó‡∏∏‡∏Å Network Interface
    let addr = format!("0.0.0.0:{}", port);

    // 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Address ‡πÅ‡∏•‡∏∞ Port ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Bind
    let listener = TcpListener::bind(&addr)
        .await
        .expect(&format!("Failed to bind TCP listener to {}", addr));

    println!("Listening on http://{}", addr);

    axum::serve(listener, app).await?;

    Ok(())
}
