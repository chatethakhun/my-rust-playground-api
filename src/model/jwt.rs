// src/model/jwt.rs

use chrono::Utc;
use serde::{Deserialize, Serialize}; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Utc
                                     // üö® ‡∏ï‡πâ‡∏≠‡∏á derive Clone ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô JWT decode/encode ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Claims {
    // Registered Claims (‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô JWT)
    pub sub: String, // Subject: Username ‡∏´‡∏£‡∏∑‡∏≠ User ID
    pub exp: i64,    // Expiration time: ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (Unix Timestamp)
    pub iat: i64,    // Issued At: ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Token (Unix Timestamp)

                     // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡πÉ‡∏ô Token ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
}

impl Claims {
    /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Claims ‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î sub ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    pub fn new(username: String, lifetime_hours: i64) -> Self {
        let now = Utc::now();

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
        let duration = chrono::Duration::hours(lifetime_hours);
        let exp = now + duration;

        Self {
            sub: username,
            iat: now.timestamp(),
            exp: exp.timestamp(), // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Unix Timestamp (i64)
        }
    }
}
