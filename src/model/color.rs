// src/model/color.rs

use chrono::NaiveDateTime;
use serde::{Deserialize, Serialize};
use sqlx::FromRow; // üö® ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ FromRow ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQLx

// üö® Color Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQLx Mapping
#[derive(Debug, Serialize, Deserialize, Clone, FromRow)]
pub struct Color {
    // Primary Key (Auto-Increment ‡πÉ‡∏ô SQLite)
    pub id: Option<i64>,

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏µ
    pub name: String, // üö® ‡πÄ‡∏û‡∏¥‡πà‡∏° name field ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    pub code: String,
    pub hex: String,

    // Boolean Fields (‡πÉ‡∏ä‡πâ bool ‡πÉ‡∏ô Rust)
    pub is_clear: bool,
    pub is_multi: bool,

    // üö® Foreign Key: ‡πÉ‡∏ä‡πâ User ID (i64) ‡πÅ‡∏ó‡∏ô Struct User
    pub user_id: i64,

    // Timestamps (NaiveDateTime ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQLx/chrono)
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}
#[derive(serde::Deserialize)]
pub struct CreateColorPayload {
    pub name: String,
    pub code: String,
    pub hex: String,
    pub is_clear: Option<bool>,
    pub is_multi: Option<bool>,
}

#[derive(Debug, Deserialize)]
pub struct UpdateColorPayload {
    // Fields ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    pub name: Option<String>,
    pub code: Option<String>,
    pub hex: Option<String>,
    pub is_clear: Option<bool>,
    pub is_multi: Option<bool>,
    // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° user_id, created_at
}

#[derive(Debug, Deserialize, Serialize, Clone)]
pub struct RunnerColor {
    pub id: i64,
    pub name: String,
    pub code: String,
    pub hex: String,
    pub is_clear: bool,
    pub is_multi: bool,
}
