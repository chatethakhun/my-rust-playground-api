// src/model/kit.rs

use chrono::{DateTime, Utc};
use mongodb::bson::oid::ObjectId;
use serde::{Deserialize, Serialize}; // üëà ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

// üöÄ Struct Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ Default
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Serde ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ updated_at ‡πÉ‡∏ô Payload

// ----------------------------------------------------
// ENUM: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö field 'grade' ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î
// ----------------------------------------------------

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")] // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Rust (SCREAMING) ‡πÑ‡∏õ MongoDB (EG, HG, etc.)
pub enum KitGrade {
    Eg,
    Hg,
    Rg,
    Mg,
    Pg,
    Other,
    Mgsd,
}

// ----------------------------------------------------
// STRUCT: Kit Model
// ----------------------------------------------------

// üöÄ Struct ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Kit Model
#[derive(Debug, Serialize, Deserialize, Clone)]
// ‡∏ö‡∏≠‡∏Å MongoDB Driver ‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Struct ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
pub struct Kit {
    // 1. _id (ObjectId)
    // - renames _id field ‡∏à‡∏≤‡∏Å MongoDB ‡πÄ‡∏õ‡πá‡∏ô id ‡πÉ‡∏ô Rust
    // - skip_serializing_if: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á id ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô None (‡∏ï‡∏≠‡∏ô insert)
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub id: Option<ObjectId>,

    // 2. name (String, required: true)
    pub name: String,

    // 3. grade (Enum, required: true)
    pub grade: KitGrade,

    // 4. manufacturer (String)
    #[serde(skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<String>, // ‡πÉ‡∏ä‡πâ Option ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null/undefined

    // 5. isFinished (Boolean, default: false)
    #[serde(default)] // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô MongoDB
    pub is_finished: bool,

    // 6. user (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö KitSchema.plugin(withUser))
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ ObjectId ‡∏Ç‡∏≠‡∏á User ‡∏´‡∏£‡∏∑‡∏≠ Username String (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Database)
    pub user: String,

    // 7. timestamps (timestamps: true)
    #[serde(default)]
    pub created_at: DateTime<Utc>,
    #[serde(default)]
    pub updated_at: DateTime<Utc>,
    // 8. virtual field: runners (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡πà‡∏≤ populate)
    // ‡πÉ‡∏ô Rust ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ Virtual Field ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    // ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ Option<Vec<Runner>> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
    // (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Struct Runner ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å)
    // #[serde(skip_serializing, default)] // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö/‡∏™‡πà‡∏á field ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á DB
    // pub runners: Option<Vec<Runner>>,
}

// **************** NOTE: Struct Runner (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ populate) ****************
// ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Runner ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô src/model/runner.rs)
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Rust ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å Type ‡∏Ç‡∏≠‡∏á Vec<Runner>
// #[derive(Debug, Serialize, Deserialize, Clone)]
// pub struct Runner {
//     // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î fields ‡∏Ç‡∏≠‡∏á Runner ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á
//     pub name: String,
//     pub kit: ObjectId, // Foreign Field
//                        // ...
// }
