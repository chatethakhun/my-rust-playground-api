// src/models/kit.rs

use chrono::NaiveDateTime;
use serde::{Deserialize, Serialize};
use sqlx::FromRow;

use crate::model::runner::Runner;

// --- Enums ---
// üö® ‡πÄ‡∏û‡∏¥‡πà‡∏° derive macros ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sqlx ‡πÅ‡∏•‡∏∞ serde
// sqlx::Type ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ sqlx ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å enum ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞ map ‡∏Å‡∏±‡∏ö TEXT ‡πÉ‡∏ô DB
// Serialize/Deserialize ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ serde ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON string ‡πÑ‡∏î‡πâ
#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, sqlx::Type)]
#[sqlx(type_name = "TEXT")]
// ‡∏ö‡∏≠‡∏Å sqlx ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö enum ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô TEXT ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#[sqlx(rename_all = "snake_case")] // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sqlx
#[serde(rename_all = "snake_case")] // ‡∏ö‡∏≠‡∏Å serde ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ snake_case (‡πÄ‡∏ä‡πà‡∏ô "in_progress") ‡πÉ‡∏ô JSON
pub enum KitStatus {
    Pending,
    InProgress,
    Done,
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize, sqlx::Type)]
#[sqlx(type_name = "TEXT")]
#[serde(rename_all = "snake_case")]
pub enum KitGrade {
    Eg,
    Hg,
    Rg,
    Mg,
    Mgsd,
    Pg,
    Other,
}

// --- Main Model: Kit ---
// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ map ‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á `kits` ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ client
#[derive(Debug, Serialize, Clone, FromRow)]
pub struct Kit {
    pub id: i64, // üëà ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠
    pub name: String,
    pub grade: KitGrade,
    pub status: KitStatus,
    pub user_id: i64,
    pub created_at: NaiveDateTime, // üëà ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠
    pub updated_at: NaiveDateTime,
}

// ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Struct ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Response ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
//
#[derive(Debug, Serialize)]
pub struct KitWithRunners {
    // ‡πÉ‡∏ä‡πâ flatten attribute ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Kit ‡∏ñ‡∏π‡∏Å‡πÉ‡∏™‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    #[serde(flatten)]
    pub kit: Kit,
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå runners ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Vec<Runner>
    pub runners: Vec<Runner>,
}

// --- Payload Structs ---
// Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON request body ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Kit ‡πÉ‡∏´‡∏°‡πà (POST /kits)
#[derive(Debug, Deserialize)]
pub struct CreateKitPayload {
    pub name: String,
    pub grade: KitGrade,
}

// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Kit (PATCH /kits/:id)
// ‡∏ó‡∏∏‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏õ‡πá‡∏ô Option ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
#[derive(Debug, Deserialize)]
pub struct UpdateKitPayload {
    pub name: Option<String>,
    pub grade: Option<KitGrade>,
}

// ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ status (‡πÄ‡∏ä‡πà‡∏ô PATCH /kits/:id/status)
#[derive(Debug, Deserialize)]
pub struct UpdateStatusPayload {
    pub status: KitStatus,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct KitQuery {
    pub status: Option<KitStatus>,
}
