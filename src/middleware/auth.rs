// src/middleware/auth.rs

use crate::model::jwt::Claims;
use crate::state::AppState;
use async_trait::async_trait; // üëà ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Dependency ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Cargo.toml
use axum::{
    extract::FromRequestParts,
    http::{request::Parts, StatusCode},
};
use jsonwebtoken::{decode, DecodingKey, Validation};
use serde::Deserialize;

// Struct ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Extractor ‡πÉ‡∏ô Handler
#[derive(Debug, Deserialize, Clone)]
pub struct AuthUser {
    pub user_id: i64, // üëà ‡πÄ‡∏Å‡πá‡∏ö ID ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å JWT Claims
}

// ----------------------------------------------------
// 1. ‡∏ô‡∏≥ Token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Header
// ----------------------------------------------------

// Implement Trait FromRequestParts ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Struct ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Extractor
// #[async_trait] ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ async fn ‡πÉ‡∏ô Trait ‡πÑ‡∏î‡πâ
#[async_trait]
impl FromRequestParts<AppState> for AuthUser {
    // Type ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Error (401 Unauthorized)
    type Rejection = StatusCode;

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô Handler
    async fn from_request_parts(
        parts: &mut Parts,
        state: &AppState,
    ) -> Result<Self, Self::Rejection> {
        // 1. ‡∏î‡∏∂‡∏á Authorization Header ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        let header_value = parts.headers.get("authorization");

        let token = match header_value {
            Some(value) => {
                let s = value.to_str().map_err(|_| StatusCode::UNAUTHORIZED)?;
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "Bearer <token>" ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô <token>
                if s.starts_with("Bearer ") {
                    &s[7..]
                } else {
                    return Err(StatusCode::UNAUTHORIZED); // 401: ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Header ‡∏ú‡∏¥‡∏î
                }
            }
            None => return Err(StatusCode::UNAUTHORIZED), // 401: ‡πÑ‡∏°‡πà‡∏û‡∏ö Header
        };

        // 2. ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (Decode) Token
        let validation = Validation::new(jsonwebtoken::Algorithm::HS256);

        let token_data = decode::<Claims>(
            token,
            &DecodingKey::from_secret(state.jwt_secret.as_ref()),
            &validation,
        )
        .map_err(|e| {
            eprintln!("JWT Decode Error: {}", e); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° Debugging Log
            StatusCode::UNAUTHORIZED
        })?;

        // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á AuthUser ‡∏à‡∏≤‡∏Å Claims
        Ok(AuthUser {
            user_id: token_data.claims.sub, // ‡∏î‡∏∂‡∏á 'sub' (username) ‡∏à‡∏≤‡∏Å Payload
        })
    }
}
