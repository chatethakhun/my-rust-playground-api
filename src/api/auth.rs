
use crate::model::jwt::Claims;
use crate::model::user::{AuthResponse, LoginPayload, Message, User};
use crate::repository::user::create_user;
use crate::repository::user::find_by_username;
use crate::state::AppState;
use argon2::PasswordVerifier;
use jsonwebtoken::{encode, EncodingKey, Header};
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ AppState
use axum::{extract::State, http::StatusCode, routing::post, Json, Router}; // üëà ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Repository Function
                                                                           // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hashing
use argon2::{
    password_hash::{
        rand_core::OsRng,
        PasswordHasher,
        // üö® ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î: ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Salt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
        SaltString, // üëà ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SaltString
    },
    Argon2,
};

use mongodb::Database; // ... (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ argon2 ‡πÅ‡∏•‡∏∞ mongodb ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)

// Handler Login (‡∏¢‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å main.rs ‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
pub async fn login_handler(
    State(state): State<AppState>,
    Json(payload): Json<LoginPayload>,
) -> Result<(StatusCode, Json<AuthResponse>), StatusCode> {
    // ... ‡πÇ‡∏Ñ‡πâ‡∏î Login Logic ...
    let db = state.mongo_client.database(&state.db_name);

    // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ú‡πà‡∏≤‡∏ô Repository (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å!)
    let user_doc = find_by_username(&db, &payload.username)
        .await
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?; // ‡∏´‡∏≤‡∏Å DB Error

    let user = match user_doc {
        Some(u) => u,
        None => return Err(StatusCode::UNAUTHORIZED), // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö
    };
    // 3. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (Password Verification)
    let is_valid = match argon2::password_hash::PasswordHash::new(&user.password) {
        // ... ‡πÇ‡∏Ñ‡πâ‡∏î Verify ‡πÄ‡∏î‡∏¥‡∏° ...
        Ok(parsed_hash) => argon2::Argon2::default()
            .verify_password(payload.password.as_bytes(), &parsed_hash)
            .is_ok(),
        Err(_) => false,
    };

    if is_valid {
        // Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        let claims = Claims::new(user.username.clone(), 24);

        // üöÄ 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
        let token = encode(
            &Header::new(jsonwebtoken::Algorithm::HS256), // ‡πÉ‡∏ä‡πâ HS256 ‡πÄ‡∏õ‡πá‡∏ô Algorithm ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            &claims,
            &EncodingKey::from_secret(state.jwt_secret.as_ref()),
        )
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;
        Ok((
            StatusCode::OK,
            Json(AuthResponse {
                token,
                message: format!("Login successful for user: {}", user.username),
            }),
        ))
    } else {
        // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        Err(StatusCode::UNAUTHORIZED)
    }
}

pub async fn register_handler(
    State(state): State<AppState>,
    Json(payload): Json<LoginPayload>, // ‡πÉ‡∏ä‡πâ LoginPayload ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
) -> Result<(StatusCode, Json<Message>), StatusCode> {
    let db: Database = state.mongo_client.database(&state.db_name);

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let existing_user = find_by_username(&db, &payload.username)
        .await
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?;

    if existing_user.is_some() {
        // Username ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        return Err(StatusCode::CONFLICT); // HTTP 409 Conflict
    }

    // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡∏£‡πâ‡∏≤‡∏á SaltString ‡∏à‡∏≤‡∏Å OsRng ‡∏Å‡πà‡∏≠‡∏ô
    let salt = SaltString::generate(&mut OsRng); // üëà ‡∏™‡∏£‡πâ‡∏≤‡∏á Salt ‡∏î‡πâ‡∏ß‡∏¢ OsRng

    // 2. Hashing ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    let password = payload.password.as_bytes();
    let password_hash = Argon2::default()
        .hash_password(password, &salt) // üëà ‡∏™‡πà‡∏á salt.as_ref() ‡πÅ‡∏ó‡∏ô OsRng
        .map_err(|_| StatusCode::INTERNAL_SERVER_ERROR)?
        .to_string();

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Struct User ‡πÉ‡∏´‡∏°‡πà
    let new_user = User {
        id: None, // ‡πÉ‡∏´‡πâ MongoDB ‡∏™‡∏£‡πâ‡∏≤‡∏á ObjectId
        username: payload.username,
        password: password_hash,
        role: "user".to_string(),
        name: None,
        email: None,
        avatar: None,
        bio: None,
        full_name: None,
    };

    // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ‡∏ú‡πà‡∏≤‡∏ô Repository
    match create_user(&db, new_user).await {
        Ok(_) => Ok((
            StatusCode::CREATED, // HTTP 201 Created
            Json(Message {
                message: "User registration successful.".to_string(),
            }),
        )),
        Err(_) => Err(StatusCode::INTERNAL_SERVER_ERROR),
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏° Routes (Option)
pub fn auth_router() -> Router<AppState> {
    Router::new()
        .route("/login", post(login_handler))
        .route("/register", post(register_handler))
}
